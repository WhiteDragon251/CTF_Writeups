import concurrent.futures
import sys
import requests
from termcolor import colored

# baseURL = "http://localhost:3000"
baseURL = "http://the-amazing-race.chal.imaginaryctf.org"
def extractMaze(htmlBody):
    maze = htmlBody.split('<code>')[1]
    maze = maze.split('</code>')[0]
    maze = maze.splitlines()
    maze.pop(0)
    return maze

def move(id, direction):
    url = baseURL + "/move"
    sendParams = {"id": id, "move": direction}
    r = requests.post(url, params=sendParams)
    if "ictf" in r.text:
        print(r.text)
    return extractMaze(r.text)

def getMaze(id):
    url = baseURL + f"/{id}"
    r = requests.get(url)
    return extractMaze(r.text)

def createMaze():
    url = baseURL
    r = requests.get(url)
    return r

def createNewMaze():
    res = createMaze().text
    res = res.split("/move?id=")[1]
    mazeId = res.split('&move=')[0]
    return mazeId


# print(createNewMaze())
mazeId = "62cb35af-cd3d-4e28-966b-0e0c0a6942eb"
# print(move(mazeId, "right"))

def main():
    num_requests = 10  # Number of concurrent requests

    with concurrent.futures.ThreadPoolExecutor(max_workers=num_requests) as executor:
        future_to_request = {
            executor.submit(move, mazeId, direction): direction
            for direction in ["down"]*4
            # for direction in ['down', 'left', 'down', 'down', 'down', 'down', 'down', 'down', 'down']
            # for direction in ['left', 'down', 'right', 'right', 'right', 'right', 'right', 'right', 'right']
        }

        for future in concurrent.futures.as_completed(future_to_request):
            # params = future_to_request[future]
            try:
                maze = future.result()
            except Exception as e:
                print(e)

def printMaze(maze):
    for row in maze:
        row = list(row)
        for element in row:
            if element == ".":
                print(colored(element, 'yellow'), end="")
            elif element == "@":
                print(colored(element, 'red'), end="")
            else:
                print(element, end="")
        print()

# myMaze = move(mazeId, sys.argv[1])
# printMaze(getMaze(mazeId))
if __name__ == "__main__": 
    for i in range(100):
        main()

